// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: sendMessage.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KotlinServiceClient is the client API for KotlinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KotlinServiceClient interface {
	SendMessage(ctx context.Context, in *PokemonMessage, opts ...grpc.CallOption) (KotlinService_SendMessageClient, error)
}

type kotlinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKotlinServiceClient(cc grpc.ClientConnInterface) KotlinServiceClient {
	return &kotlinServiceClient{cc}
}

func (c *kotlinServiceClient) SendMessage(ctx context.Context, in *PokemonMessage, opts ...grpc.CallOption) (KotlinService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &KotlinService_ServiceDesc.Streams[0], "/KotlinService/sendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &kotlinServiceSendMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KotlinService_SendMessageClient interface {
	Recv() (*PokemonResponseMessage, error)
	grpc.ClientStream
}

type kotlinServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *kotlinServiceSendMessageClient) Recv() (*PokemonResponseMessage, error) {
	m := new(PokemonResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KotlinServiceServer is the server API for KotlinService service.
// All implementations must embed UnimplementedKotlinServiceServer
// for forward compatibility
type KotlinServiceServer interface {
	SendMessage(*PokemonMessage, KotlinService_SendMessageServer) error
	mustEmbedUnimplementedKotlinServiceServer()
}

// UnimplementedKotlinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKotlinServiceServer struct {
}

func (UnimplementedKotlinServiceServer) SendMessage(*PokemonMessage, KotlinService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedKotlinServiceServer) mustEmbedUnimplementedKotlinServiceServer() {}

// UnsafeKotlinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KotlinServiceServer will
// result in compilation errors.
type UnsafeKotlinServiceServer interface {
	mustEmbedUnimplementedKotlinServiceServer()
}

func RegisterKotlinServiceServer(s grpc.ServiceRegistrar, srv KotlinServiceServer) {
	s.RegisterService(&KotlinService_ServiceDesc, srv)
}

func _KotlinService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PokemonMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KotlinServiceServer).SendMessage(m, &kotlinServiceSendMessageServer{stream})
}

type KotlinService_SendMessageServer interface {
	Send(*PokemonResponseMessage) error
	grpc.ServerStream
}

type kotlinServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *kotlinServiceSendMessageServer) Send(m *PokemonResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

// KotlinService_ServiceDesc is the grpc.ServiceDesc for KotlinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KotlinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KotlinService",
	HandlerType: (*KotlinServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendMessage",
			Handler:       _KotlinService_SendMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sendMessage.proto",
}
